import React, { useState, useEffect } from "react";

// Investor Relations Page - Omkar Enterprises
// Single-file React component (TailwindCSS + recharts + shadcn/ui style imports)
// Default export is the page component. Replace API_ENDPOINTS and keys with your back-end.

import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, Thead, Tbody, Tr, Th, Td } from "@/components/ui/table";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from "recharts";

const GOOGLE_SCRIPT_URL = process.env.NEXT_PUBLIC_GOOGLE_SCRIPT_URL || "REPLACE_WITH_YOUR_GOOGLE_SCRIPT_URL";
const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "REPLACE_WITH_YOUR_API_ENDPOINT";

export default function InvestorRelationsPage() {
  const [showConsentPopup, setShowConsentPopup] = useState(true);
  const [consentName, setConsentName] = useState("");
  const [consentPhone, setConsentPhone] = useState("");
  const [consented, setConsented] = useState(false);

  const [authToken, setAuthToken] = useState(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const [investorData, setInvestorData] = useState(null);
  const [loading, setLoading] = useState(false);

  // Sample historical performance data for chart
  const samplePerformance = [
    { month: "Jan", value: 120000 },
    { month: "Feb", value: 125000 },
    { month: "Mar", value: 118000 },
    { month: "Apr", value: 130000 },
    { month: "May", value: 140000 },
    { month: "Jun", value: 135000 },
    { month: "Jul", value: 150000 },
    { month: "Aug", value: 155000 },
    { month: "Sep", value: 160000 }
  ];

  // Consent submit: send to Google Script and hide popup
  async function submitConsent(e) {
    e.preventDefault();
    if (!consentName || !consentPhone) return alert("Please enter name and phone to proceed.");

    const payload = {
      name: consentName,
      phone: consentPhone,
      message: `I, ${consentName}, confirm that I have read and understood the disclaimer and give my consent to receive private information.`,
      source: "Website"
    };

    try {
      await fetch(GOOGLE_SCRIPT_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      setConsented(true);
      setShowConsentPopup(false);
    } catch (err) {
      console.error(err);
      alert("We could not record consent automatically. Please try again later.");
    }
  }

  // Mock login to retrieve investor data from API
  async function handleLogin(e) {
    e.preventDefault();
    setLoading(true);
    try {
      // Replace with real auth call
      const resp = await fetch(`${API_BASE}/auth/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password })
      });
      if (!resp.ok) throw new Error("Login failed");
      const json = await resp.json();
      setAuthToken(json.token);
      await loadInvestorData(json.token);
    } catch (err) {
      console.error(err);
      alert("Login failed. Check credentials or API endpoint.");
    } finally {
      setLoading(false);
    }
  }

  async function loadInvestorData(token) {
    try {
      // Replace with real investor API
      const resp = await fetch(`${API_BASE}/investor/me`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      if (!resp.ok) throw new Error("Unable to fetch investor data");
      const data = await resp.json();
      setInvestorData(data);
    } catch (err) {
      console.error(err);
      // For demo, set mock data
      setInvestorData({
        name: "Demo Investor",
        mobile: "+91-98XXXXXXX",
        positions: [
          { id: "L-001", amount: 50000, since: "11-Sep-2025", status: "Active", nextPayout: "12-Oct-2025" },
          { id: "L-002", amount: 100000, since: "01-Jan-2025", status: "Matured", nextPayout: "--" }
        ],
        performance: samplePerformance
      });
    }
  }

  function exportPositionsCSV() {
    if (!investorData) return; 
    const headers = ["Loan ID", "Amount", "Since", "Status", "Next Payout"];
    const rows = investorData.positions.map(p => [p.id, p.amount, p.since, p.status, p.nextPayout]);
    const csv = [headers.join(','), ...rows.map(r => r.join(','))].join('\n');
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `positions_${investorData.name.replace(/\s+/g,'_')}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <header className="max-w-6xl mx-auto flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold">Omkar Enterprises — Investor Relations</h1>
          <p className="text-sm text-muted-foreground">Private investor portal • Confidential & Contractual</p>
        </div>
        <div>
          {!authToken ? (
            <form onSubmit={handleLogin} className="flex gap-2 items-center">
              <Input placeholder="Email" value={email} onChange={(e)=>setEmail(e.target.value)} />
              <Input placeholder="Password" type="password" value={password} onChange={(e)=>setPassword(e.target.value)} />
              <Button type="submit">Login</Button>
            </form>
          ) : (
            <div className="flex gap-3 items-center">
              <span className="text-sm">Logged in</span>
              <Button onClick={()=>{ setAuthToken(null); setInvestorData(null); }}>Sign out</Button>
            </div>
          )}
        </div>
      </header>

      <main className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
        <section className="lg:col-span-2">
          <Card>
            <CardContent>
              <h2 className="text-lg font-semibold mb-2">Portfolio Overview</h2>

              {!investorData ? (
                <p className="text-sm text-muted-foreground">Sign in to view your positions, past performance and documents.</p>
              ) : (
                <>
                  <div className="flex justify-between items-center mb-4">
                    <div>
                      <h3 className="text-xl font-bold">{investorData.name}</h3>
                      <p className="text-sm">{investorData.mobile}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm">Total Invested</p>
                      <p className="text-xl font-semibold">₹{investorData.positions.reduce((s,p)=>s+p.amount,0)}</p>
                    </div>
                  </div>

                  <div style={{ height: 280 }} className="mb-6">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={investorData.performance || samplePerformance}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <Tooltip />
                        <Line type="monotone" dataKey="value" stroke="#8884d8" strokeWidth={2} />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>

                  <div className="mb-4">
                    <h4 className="font-medium mb-2">Active Positions</h4>
                    <Table>
                      <Thead>
                        <Tr><Th>Loan ID</Th><Th>Amount</Th><Th>Since</Th><Th>Status</Th><Th>Next Payout</Th></Tr>
                      </Thead>
                      <Tbody>
                        {investorData.positions.map(pos => (
                          <Tr key={pos.id}>
                            <Td>{pos.id}</Td>
                            <Td>₹{pos.amount}</Td>
                            <Td>{pos.since}</Td>
                            <Td>{pos.status}</Td>
                            <Td>{pos.nextPayout}</Td>
                          </Tr>
                        ))}
                      </Tbody>
                    </Table>
                  </div>

                  <div className="flex gap-3">
                    <Button onClick={exportPositionsCSV}>Export Positions (CSV)</Button>
                    <Button onClick={()=>alert('Requesting statement — implement API call to generate PDF')}>Download Statement (PDF)</Button>
                  </div>
                </>
              )}
            </CardContent>
          </Card>

          <div className="mt-6">
            <Card>
              <CardContent>
                <h3 className="font-semibold mb-2">Enquiry / Request a Call</h3>
                <p className="text-sm text-muted-foreground mb-3">If you are an investor or prospective investor and want a call from our team, submit a request below.</p>
                <form onSubmit={(e)=>{e.preventDefault(); alert('Request submitted — connect to API to auto-log.');}} className="grid gap-2">
                  <Input placeholder="Name" required />
                  <Input placeholder="Contact No." required />
                  <Input placeholder="Email (optional)" />
                  <Button type="submit">Request Call</Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </section>

        <aside>
          <Card>
            <CardContent>
              <h3 className="font-semibold mb-2">Quick Links</h3>
              <ul className="text-sm">
                <li><a href="#" onClick={(e)=>{e.preventDefault(); alert('Open KYC upload modal');}}>Upload KYC / Docs</a></li>
                <li><a href="#" onClick={(e)=>{e.preventDefault(); alert('Open agreements list');}}>View Agreements</a></li>
                <li><a href="#" onClick={(e)=>{e.preventDefault(); alert('Open payout schedule');}}>Payout Schedule</a></li>
                <li><a href="#" onClick={(e)=>{e.preventDefault(); alert('Contact support');}}>Contact Relationship Manager</a></li>
              </ul>
            </CardContent>
          </Card>

          <Card className="mt-4">
            <CardContent>
              <h4 className="font-semibold mb-2">Safety & Compliance</h4>
              <p className="text-sm text-muted-foreground">
                Omkar Enterprises is a private consultancy. We do not accept public deposits. All dealings are private contracts.
              </p>
              <Button className="mt-3" onClick={()=>window.open('/terms','_blank')}>View Legal Terms</Button>
            </CardContent>
          </Card>
        </aside>
      </main>

      {/* Consent Popup - appears only on Investment Relationship Page */}
      {showConsentPopup && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80">
          <div className="bg-white rounded-xl p-6 w-11/12 max-w-md">
            <h2 className="text-lg font-semibold mb-3">Consent Required to View Investment Information</h2>
            <p className="text-sm mb-4">Omkar Enterprises is not a bank, NBFC, or deposit-taking company. This page contains private, contractual information. By proceeding you acknowledge the disclaimer and consent to receive information on a private basis.</p>
            <form onSubmit={submitConsent} className="grid gap-2">
              <label className="text-sm">Full Name</label>
              <Input value={consentName} onChange={(e)=>setConsentName(e.target.value)} required />
              <label className="text-sm">Contact Number</label>
              <Input value={consentPhone} onChange={(e)=>setConsentPhone(e.target.value)} required />
              <div className="flex items-center gap-2">
                <input id="agree" type="checkbox" className="w-4 h-4" required />
                <label htmlFor="agree" className="text-sm">I have read and understood the disclaimer and consent to proceed.</label>
              </div>
              <div className="flex gap-3 mt-2">
                <Button type="submit">Proceed</Button>
                <Button onClick={()=>{ setShowConsentPopup(false); alert('You may not view investment details without consent.'); }}>Close</Button>
              </div>
            </form>
          </div>
        </div>
      )}

      <footer className="max-w-6xl mx-auto text-center py-6 text-sm text-muted-foreground">
        © Omkar Enterprises — Private & Confidential. Not a bank or NBFC. All investment arrangements are private contracts, not public deposits, compliant with Companies Act, 2013 and BUDS Act, 2019.
      </footer>
    </div>
  );
}
